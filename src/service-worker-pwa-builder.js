/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';
const base64ToArrayBuffer = require('snackabra/dist/snackabra').base64ToArrayBuffer

let notificationsMap = new Map();

setInterval(() => {
  notificationsMap = new Map();
}, 1000 * 60 * 5)

clientsClaim();


// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
console.log(self)
precacheAndRoute(self.__WB_MANIFEST || []);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => (url.origin === self.location.origin && url.pathname.endsWith('.png')) || url.pathname.startsWith('data:image'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 500 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  console.log('message', event)
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
  if (event.data && event.data.type === 'NOTIFICATION_RESPOND') {
    notify(event.data.notification)
  }
});

const notify = (data) => {
  notificationsMap.set(data.tag, data)
  self.registration.showNotification(data.title, {
    ...data
  })
}

self.addEventListener('push', (event) => {
  const data = event.data.json()

  console.log('Got push', data)
  const clients = self.clients;
  const channel_id = data.data.channel_id;
  data.icon = data.icon ? data.icon : "https://preview.384chat.pages.dev/android-chrome-192x192.png"
  data.title = data.title ? data.title : "Snackabra"
  data.body = data.body ? data.body : "You have a new message"
  console.log(clients)
  let inFocus = false;
  event.waitUntil(clients.matchAll({ includeUncontrolled: true, type: 'all' }).then((clientList) => {
    console.log('clientList', clientList)
    if (clientList.length > 0) {
      for (const client of clientList) {
        console.log('client', client.url, channel_id)
        console.log(client.url.match(channel_id))
        if (client.url.match(channel_id)) {
          inFocus = true;
        }
        if (client?.focused) {
          inFocus = true;
        }
      }
      if (!inFocus && !notificationsMap.has(data.tag)) {
        notify(data)
      }

      return;
    } else {
      notify(data)
      return;
    }
  }));
})

self.addEventListener("pushsubscriptionchange", async (event) => {
  console.log('Subscription expired... renweing');
  const subscription = await window.sw_registration.pushManager.subscribe({
    userVisibleOnly: true,
    applicationServerKey: base64ToArrayBuffer(process.env.REACT_APP_PUBLIC_VAPID_KEY),
  })

  await fetch(process.env.REACT_APP_NOTIFICATION_SERVER + '/subscribe', {
    method: 'POST',
    body: JSON.stringify({
      channel_id: this.props.roomId,
      subscription: subscription
    }),
    headers: {
      'Content-Type': 'application/json',
    },
  })
});

self.addEventListener('notificationclick', (event) => {
  console.log('On notification click: ', event.notification);
  const channel_id = event.notification.data.channel_id;
  event.notification.close();
  const clients = self.clients;

  // This looks to see if the current is already open and
  // focuses if it is
  event.waitUntil(clients.matchAll({ includeUncontrolled: true }).then((clientList) => {
    for (const client of clientList) {
      if ('focus' in client) {
        client.postMessage({
          type: 'focus',
          channel_id: channel_id,
        })
        return client.focus();
      }
    }

    if (clients.openWindow) return clients.openWindow('/' + channel_id);

  }));
});

function getNotifications() {
  return new Promise((resolve, reject) => {
    self.registration.pushManager.getSubscription()
      .then((subscription) => {
        if (!subscription) {
          // We aren't subscribed to push
          resolve('not subscribed')
        }
        console.log('Existing sub:', subscription)
        fetch(process.env.REACT_APP_NOTIFICATION_SERVER, {
          method: 'POST',
          body: JSON.stringify(subscription),
          headers: {
            'content-type': 'application/json',
          }
        }).then(() => {
          resolve('Success')
        })
      }).catch((e) => {
        console.error(e)
        reject(e)
      })
  })

}

self.addEventListener("periodicsync", (event) => {
  console.log('test', event)
  if (event.tag === "get-notifications") {
    event.waitUntil(getNotifications());
  }
});

self.addEventListener('error', function (event) {
});

// The Util Function to hack URLs of intercepted requests
const getFixedUrl = (req) => {
  var now = Date.now()
  var url = new URL(req.url)

  // 1. fixed http URL
  // Just keep syncing with location.protocol
  // fetch(httpURL) belongs to active mixed content.
  // And fetch(httpRequest) is not supported yet.
  url.protocol = self.location.protocol

  // 2. add query for caching-busting.
  // Github Pages served with Cache-Control: max-age=600
  // max-age on mutable content is error-prone, with SW life of bugs can even extend.
  // Until cache mode of Fetch API landed, we have to workaround cache-busting with query string.
  // Cache-Control-Bug: https://bugs.chromium.org/p/chromium/issues/detail?id=453190
  if (url.hostname === self.location.hostname) {
    url.search += (url.search ? '&' : '?') + 'cache-bust=' + now
  }
  return url.href
}

self.addEventListener('fetch', function (event) {
  // Stale-while-revalidate
  // similar to HTTP's stale-while-revalidate: https://www.mnot.net/blog/2007/12/12/stale
  // Upgrade from Jake's to Surma's: https://gist.github.com/surma/eb441223daaedf880801ad80006389f1
  const cached = caches.match(event.request)
  const fixedUrl = getFixedUrl(event.request)
  const fetched = fetch(fixedUrl, { cache: 'no-store' })
  const fetchedCopy = fetched.then(resp => resp.clone())

  // Call respondWith() with whatever we get first.
  // If the fetch fails (e.g disconnected), wait for the cache.
  // If thereâ€™s nothing in cache, wait for the fetch.
  // If neither yields a response, return offline pages.
  event.respondWith(
    Promise.race([fetched.catch(_ => cached), cached])
      .then(resp => resp || fetched)
      .catch(_ => { /* eat any errors */ })
  )

  // Update the cache with the version we fetched (only for ok status)
  event.waitUntil(
    Promise.all([fetchedCopy, caches.open("pwa-cache")])
      .then(([response, cache]) => response.ok && cache.put(event.request, response))
      .catch(_ => { /* eat any errors */ })
  )
});

function cacheThenNetwork(request) {
    return caches.open('dynamic-cache').then(function(cache) {
      return cache.match(request).then(function(cachedResponse) {
        var fetchPromise = fetch(request).then(function(networkResponse) {
          // Clone the network response to store it in the cache
          var responseToCache = networkResponse.clone();
          cache.put(request, responseToCache); // Update the cache
          return networkResponse; // Return the network response
        });
  
        if (request.headers.get('bypass-cache')) {
          return fetchPromise; // Force bypass of cache
        }
  
        // Return the cached response first (if available) and update with network response
        return cachedResponse || fetchPromise;
      });
    });
  }
