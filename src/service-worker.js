/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

let readyResolver;
const IndexedKVReadyFlag = new Promise((resolve) => {
  readyResolver = resolve;
});
let DB;
let options = {
  db: 'sb_data',
  table: 'cache'
}
let openReq = self.indexedDB.open(options.db);

openReq.addEventListener('error', (e) => {
  console.error("Database error: " + e);
  throw new Error("Database error: " + e);
});
openReq.addEventListener('success', (e) => {
  DB = e.target.result;
  console.log('success')
  if (typeof readyResolver !== 'undefined') {
    readyResolver(true);
  }
});
openReq.addEventListener('upgradeneeded', (e) => {
  DB = e.target.result;
  DB.createObjectStore(options.table, { keyPath: "key" });
  console.log('upgradeneeded')

});

function openCursor(regex, callback) {
  return new Promise((resolve, reject) => {

    IndexedKVReadyFlag.then(() => {
      if (DB) {
        const transaction = DB.transaction([options.table], "readonly");
        const objectStore = transaction.objectStore(options.table);
        const request = objectStore.openCursor(null, 'next');
        let returnArray = [];
        request.onsuccess = function () {
          const cursor = request.result;
          if (cursor) {
            if (String(cursor.key).match(regex)) {
              returnArray.push({ value: cursor.value.value, key: cursor.value.key });
            }
            cursor.continue();
          }
          else {
            if (callback) {
              callback(returnArray);
            }
            resolve(returnArray);
          }
        };
      }
      else {
        reject('DB is not defined');
      }
    })
  });
}

function getItem(key) {
  return new Promise(async (resolve, reject) => {
    await IndexedKVReadyFlag
    if (DB) {
      const transaction = DB.transaction([options.table]);
      const objectStore = transaction.objectStore(options.table);
      const request = objectStore.get(key);
      request.onerror = event => {
        reject(event);
      };
      request.onsuccess = () => {
        const data = request.result;
        if (data?.value) {
          resolve(data.value);
        }
        else {
          resolve(null);
        }
      };
    }
    else {
      reject(new Error('db is not defined'));
    }
  });
}

function addItem(key, value) {
  return new Promise((resolve, reject) => {
    IndexedKVReadyFlag.then(() => {
      if (DB) {
        const transaction = DB.transaction([options.table], "readwrite")
        const objectStore = transaction.objectStore(options.table);
        const request = objectStore.get(key);
        request.onerror = event => {
          reject(event);
        };
        request.onsuccess = () => {
          const data = request.result;
          if (data?.value) {
            //Data exists we update the value
            data.value = value;
            try {
              const requestUpdate = objectStore.put(data);
              requestUpdate.onerror = event => {
                reject(event);
              };
              requestUpdate.onsuccess = (event) => {
                resolve(requestUpdate.result);
              };
            } catch (e) {
              console.error(e);
            }
          }
          else {
            const requestAdd = objectStore.add({ key: key, value: value });
            requestAdd.onsuccess = () => {
              resolve(requestAdd.result);
            };
            requestAdd.onerror = event => {
              console.error(event);
              reject(event);
            };
          }
        };
      }
      else {
        reject(new Error('db is not defined'));
      }
    });
  });
}

let notificationsMap = new Map();
const channel = new BroadcastChannel('sw-messages');
let focused_channel_id = null;
let notify_timeout = null;
setInterval(() => {
  notificationsMap = new Map();
}, 1000 * 60 * 5)

clientsClaim();


// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

const HOSTNAME_WHITELIST = [
  self.location.hostname,
  new URL(process.env.REACT_APP_NOTIFICATION_SERVER).hostname,
  // new URL(process.env.REACT_APP_CHANNEL_SERVER).hostname,
  new URL(process.env.REACT_APP_SHARD_SERVER).hostname,
  new URL(process.env.REACT_APP_STORAGE_SERVER).hostname,
  'fonts.gstatic.com',
  'fonts.googleapis.com',
  'cdn.jsdelivr.net'
]

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => (url.origin === self.location.origin && url.pathname.endsWith('.png')) || url.pathname.startsWith('data:image'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 500 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  console.log('message', event)
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
  if (event.data && event.data.type === 'NOTIFICATION_RESPOND') {
    notify(event.data.notification)
  }
});

const notify = (data) => {
  notificationsMap.set(data.tag, data)
  getItem('sb_data_' + data.data.channel_id).then((channel) => {
    console.log('channel notification from indexkv', channel)
    console.log('channel notification from indexkv', data)
    data.vibrate = [750, 100, 750]
    data.badge = data.icon
    data.body = 'New message in ' + channel.alias;
    self.registration.showNotification('Snackabra', {
      ...data
    })
  })
}

channel.addEventListener('message', (event) => {
  if (event.data.channel_id) {
    console.log('we are focused on channel:', event.data.channel_id)
    if (notify_timeout) {
      clearTimeout(notify_timeout)
    }
    focused_channel_id = event.data.channel_id;
  }
});

self.addEventListener('push', (event) => {
  console.log('Got push')
  const data = event.data.json()
  console.log(data)

  console.log(self.location.href)
  const clients = self.clients;
  const channel_id = data.data.channel_id;
  data.icon = data.icon ? data.icon : "https://preview.384chat.pages.dev/android-chrome-192x192.png"
  data.title = data.title ? data.title : "Snackabra"
  data.body = data.body ? data.body : "You have a new message"
  console.log(clients)
  let inFocus = false;
  event.waitUntil(clients.matchAll({ includeUncontrolled: false, type: 'window' }).then((clientList) => {
    console.log('clientList', clientList)

    // channel.postMessage({ title: 'ping', channel_id: channel_id });
    // for (const client of clientList) {
    //   console.log('client', client.url, channel_id)
    //   console.log(client.url.match(channel_id))
    //   // client.postMessage({ action: 'showNotification', channel_id: channel_id });
    //   if (client.url.match(channel_id)) {
    //     inFocus = true;
    //   }
    //   if (client?.focused) {
    //     inFocus = true;
    //   }
    // }
    // if (!inFocus && !notificationsMap.has(data.tag)) {
    //   notify(data)
    // }

    // notify_timeout = setTimeout(() => {
    if (focused_channel_id !== channel_id) {
      console.log('notify', focused_channel_id, channel_id)
      notify(data)
    }

    // }, 2000)

    return;

  }));
})

self.addEventListener('notificationclick', (event) => {
  console.log('On notification click: ', event.notification);
  const channel_id = event.notification.data.channel_id;
  event.notification.close();
  const clients = self.clients;

  // This looks to see if the current is already open and
  // focuses if it is
  event.waitUntil(clients.matchAll({ includeUncontrolled: true }).then((clientList) => {
    for (const client of clientList) {
      if ('focus' in client) {
        client.postMessage({
          type: 'focus',
          channel_id: channel_id,
        })
        return client.focus();
      }
    }

    if (clients.openWindow) return clients.openWindow('/' + channel_id);

  }));
});

function getNotifications() {
  return new Promise((resolve, reject) => {
    self.registration.pushManager.getSubscription()
      .then((subscription) => {
        if (!subscription) {
          // We aren't subscribed to push
          resolve('not subscribed')
        }
        console.log('Existing sub:', subscription)
        fetch(process.env.REACT_APP_NOTIFICATION_SERVER, {
          method: 'POST',
          body: JSON.stringify(subscription),
          headers: {
            'content-type': 'application/json',
          }
        }).then(() => {
          resolve('Success')
        })
      }).catch((e) => {
        console.error(e)
        reject(e)
      })
  })

}


self.addEventListener("periodicsync", (event) => {
  console.log('test', event)
  if (event.tag === "get-notifications") {
    event.waitUntil(getNotifications());
  }
});

self.addEventListener('error', function (event) {
  console.error(event)
});

self.addEventListener('fetch', function (event) {
  if (event.request.method === 'GET') {
    if (HOSTNAME_WHITELIST.indexOf(new URL(event.request.url).hostname) > -1) {
      console.log('Handling fetch event for', event.request.url)
      // Stale-while-revalidate
      // similar to HTTP's stale-while-revalidate: https://www.mnot.net/blog/2007/12/12/stale
      // Upgrade from Jake's to Surma's: https://gist.github.com/surma/eb441223daaedf880801ad80006389f1
      const cached = caches.match(event.request)
      // const fixedUrl = getFixedUrl(event.request)
      // event.request.url = fixedUrl
      const fetched = fetch(event.request)
      const fetchedCopy = fetched.then(resp => resp.clone())

      // Call respondWith() with whatever we get first.
      // If the fetch fails (e.g disconnected), wait for the cache.
      // If there’s nothing in cache, wait for the fetch.
      // If neither yields a response, return offline pages.
      event.respondWith(
        Promise.race([fetched.catch(_ => cached), cached])
          .then(resp => resp || fetched)
          .catch(_ => { /* eat any errors */ })
      )

      // Update the cache with the version we fetched (only for ok status)
      event.waitUntil(
        Promise.all([fetchedCopy, caches.open("pwa-cache")])
          .then(([response, cache]) => response.ok && cache.put(event.request, response))
          .catch(_ => { /* eat any errors */ })
      )
    }
  } else {
    // Handle other types of requests (e.g., PUT, POST) without caching
    event.respondWith(fetch(event.request));
  }
});